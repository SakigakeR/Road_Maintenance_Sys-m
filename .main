#include <windows.h>
#include <stdio.h>
#include <mmsystem.h>
#include <cv.h>
#include <cxcore.h>
#include <highgui.h>

#pragma comment(lib, "Winmm.lib")

#define type 0
typedef struct RouteNode {
	float distant;
	bool LR;
	struct RouteNode *Next;
}RouteNode;

float Get_Speed() {
	float speed=0;
	//通过安卓API调用GPS获取速度
	return speed;
}


int Alarm(int n) {
	LPCWSTR*TEMP;
	TEMP = (LPCWSTR *)malloc(sizeof(LPCWSTR));
	switch (n){
	case 0: *TEMP = TEXT("0.wav"); break;
	case 1: *TEMP = TEXT("1.wav"); break;
	case 2: *TEMP = TEXT("2.wav"); break;
	case 3: *TEMP = TEXT("3.wav"); break;
	};
	PlaySound((*TEMP), NULL, SND_FILENAME);
	return 0;
}

int Safty_Distance(IplImage* pFr,int Cut_High) {
	int dis;
	float speed=Get_Speed();
	if (speed <= 100)
		dis = 100;
	else
		dis = speed+10;
	//坡度可用陀螺仪获取一个角度参数，进行距离修正
	Cut_High = 70;//(pFr->height)*dis/340;
	return Cut_High;
}

int Road_Maintenance_Sys(CvMemStorage* storage, CvSeq* lines, IplImage* pFr, IplImage* pFrImg, IplImage* pBkImg, CvMat* pFrameMat, CvMat* pFrMat, CvMat* pBkMat) {
	//获取轮廓

	//前景图转换为灰度图
	cvCvtColor(pFr, pFrImg, CV_BGR2GRAY);
	cvConvert(pFrImg, pFrameMat);

	//高斯滤波先，以平滑图像
	cvSmooth(pFrameMat, pFrameMat, CV_GAUSSIAN, 3, 0, 0.0);

	//当前帧跟背景图相减
	cvAbsDiff(pFrameMat, pBkMat, pFrMat);

	//二值化前景图
	cvThreshold(pFrMat, pFrImg, 35, 255.0, CV_THRESH_BINARY);

	//进行形态学滤波，去掉噪音
	cvErode(pFrImg, pFrImg, 0, 1);
	cvDilate(pFrImg, pFrImg, 0, 1);

	//更新背景
	cvRunningAvg(pFrameMat, pBkMat, 0.003, 0);
	//pCutBkMat = cvCloneMat(pFrameMat);

	//将背景转化为图像格式，用以显示
	//cvConvert(pBkMat, pBkImg);
	cvCvtColor(pFr, pBkImg, CV_BGR2GRAY);

	//canny变化
	cvCanny(pFrImg, pFrImg, 50, 100);

	lines = cvHoughLines2(pFrImg, storage, CV_HOUGH_PROBABILISTIC, 1, CV_PI / 130, 75, 50, 45);
	printf("Lines number: %d\n", lines->total);
	
	//画出直线
	int x=0;
	for (int i = 0; i < lines->total; i++) {
		CvPoint* line = (CvPoint*)cvGetSeqElem(lines, i);
		cvLine(pFr, line[0], line[1], CV_RGB(255, 0, 0), 6, CV_AA);
		x+=line->x;
	}
	if (lines->total) {
		x = x / (lines->total);
		//水平的平均坐标获取

		if ((pFr->width*0.9) <= x <= (pFr->width*1.1))
			Beep(1000, 1);
		//Alarm(2); 
	}
	return 0;
}

int Forward_Distance(IplImage* pFr, IplImage* pFrImg,IplImage* pBkImg, CvMat* pFrameMat, CvMat* pFrMat, CvMat* pBkMat  ) {//时隔几帧进行判断
																														  //前景图转换为灰度图
	cvCvtColor(pFr, pFrImg, CV_BGR2GRAY);
	cvConvert(pFrImg, pFrameMat);

	//高斯滤波先，以平滑图像
	cvSmooth(pFrameMat, pFrameMat, CV_GAUSSIAN, 7, 0, 0.0);

	//当前帧跟背景图相减
	cvAbsDiff(pFrameMat, pBkMat, pFrMat);

	//二值化前景图
	cvThreshold(pFrMat, pFrImg, 35, 255.0, CV_THRESH_BINARY);

	//进行形态学滤波，去掉噪音
	cvErode(pFrImg, pFrImg, 0, 1);
	cvDilate(pFrImg, pFrImg, 0, 1);

	//更新背景
	cvRunningAvg(pFrameMat, pBkMat, 0.003, 0);
	//pCutBkMat = cvCloneMat(pFrameMat);

	//将背景转化为图像格式，用以显示
	cvConvert(pBkMat, pBkImg);
	//cvCvtColor(pFrame, pBkImg, CV_BGR2GRAY);

	//canny变化
	cvCanny(pFrImg, pFrImg, 50, 100);//通过速度获取安全距离
	//if (1)//在切割完的图像进行差值然后检测运动的像素点.
	//	Alarm(3);//如何实现几帧的缓冲?
	return 0;
}

RouteNode *CreateRoute() {
	RouteNode *head;
	RouteNode *p, *pre;
	float temp_D=0;
	int a = 30;
	head = (RouteNode *)malloc(sizeof(RouteNode));
	head->Next = NULL;
	pre = head;
	while (1) {//未达目的地
	temp_D += Get_Speed() * 30;//从初始地点开始运行获取速度进行距离的累加
	Sleep(a);
	if (1) {//通过陀螺仪获取加速度，判断方向
		p = (RouteNode *)malloc(sizeof(RouteNode));
		p->LR = 1;
		p->distant = temp_D;
		p->Next = NULL;
		temp_D = 0;
		pre->Next = p;
		pre = p;
		}
	}
	return head;
}


int Auto_Rounds(RouteNode* route) {
	float speed,temp1,temp2;
	int a = 30;
	temp1 = route->distant;
	while(route->Next != NULL) {
		speed = Get_Speed();
		temp2 = temp1 - speed*a;
		if (temp2 <= 0) {
			Alarm(route->LR);//如何并行执行?
			route = route->Next;
			temp1 = route->distant;
		}
		Sleep(a);
	}
	return 0;
}//与图像无关仅基于速度对时间的积分获得的位移进行路线判断

int main(int argc, char** argv) {
	
	IplImage* pFrame = NULL;
	IplImage* pCutFrame = NULL;
	IplImage* pCutFrImg = NULL;
	IplImage* pCutBkImg = NULL;

	//声明CvMat指针
	CvMat* pCutFrameMat = NULL;
	CvMat* pCutFrMat = NULL;
	CvMat* pCutBkMat = NULL;

	//声明CvCapture指针
	CvCapture* pCapture = NULL;

	//声明CvMemStorage和CvSeg指针
	CvMemStorage* storage = cvCreateMemStorage();
	CvSeq* lines = NULL;
	
	//当前帧数
	int nFrmNum = 0;
	
	//裁剪的天空高度
	int CutHeight = 70;
	//窗口命名
	cvNamedWindow("video", 1);
	cvNamedWindow("background", 1);
	cvNamedWindow("foreground", 1);

	//调整窗口初始位置
	cvMoveWindow("video", 30, 0);
	cvMoveWindow("background", 360, 0);
	cvMoveWindow("foreground", 690, 0);

	if (argc > 2) {
		fprintf(stderr, "Usage: bkgrd [video_file_name]\n");
		return -1;
	}

	//打开摄像头
	if (argc == 1)
		if (!(pCapture = cvCaptureFromCAM(-1))) {
			fprintf(stderr, "Can not open camera.\n");
			return -2;
		}

	//打开视频文件
	if (argc == 2)
		if (!(pCapture = cvCaptureFromFile(argv[1]))) {
			fprintf(stderr, "Can not open video file %s\n", argv[1]);//视频格式avi
			return -2;
		}

	//每次读取一桢的视频
	while (pFrame = cvQueryFrame(pCapture)) {
		if(type)
			CutHeight=Safty_Distance(pFrame, CutHeight);
		cvSetImageROI(pFrame, cvRect(0, CutHeight, pFrame->width, pFrame->height - CutHeight));
		nFrmNum++;
		
		//第一次要申请内存p
		if (nFrmNum == 1) {
			pCutFrame = cvCreateImage(cvSize(pFrame->width, pFrame->height - CutHeight), pFrame->depth, pFrame->nChannels);
			cvCopy(pFrame, pCutFrame, 0);
			pCutBkImg = cvCreateImage(cvSize(pCutFrame->width, pCutFrame->height), IPL_DEPTH_8U, 1);
			pCutFrImg = cvCreateImage(cvSize(pCutFrame->width, pCutFrame->height), IPL_DEPTH_8U, 1);

			pCutBkMat = cvCreateMat(pCutFrame->height, pCutFrame->width, CV_32FC1);
			pCutFrMat = cvCreateMat(pCutFrame->height, pCutFrame->width, CV_32FC1);
			pCutFrameMat = cvCreateMat(pCutFrame->height, pCutFrame->width, CV_32FC1);
			
			//转化成单通道图像再处理
			cvCvtColor(pCutFrame, pCutBkImg, CV_BGR2GRAY);
			cvCvtColor(pCutFrame, pCutFrImg, CV_BGR2GRAY);
			
			//转换成矩阵
			cvConvert(pCutFrImg, pCutFrameMat);
			cvConvert(pCutFrImg, pCutFrMat);
			cvConvert(pCutFrImg, pCutBkMat);
		}
		else {
			if (type) {
				//根据速度获得剪切图
				cvCopy(pFrame, pCutFrame, 0);
				Forward_Distance(pCutFrame, pCutFrImg, pCutBkImg, pCutFrameMat, pCutFrMat, pCutBkMat);
			}
			else {
				cvCopy(pFrame, pCutFrame, 0);
				Road_Maintenance_Sys(storage,lines, pCutFrame, pCutFrImg, pCutBkImg, pCutFrameMat, pCutFrMat, pCutBkMat);
				
			}

			//显示图像
			cvShowImage("video", pCutFrame);
			cvShowImage("background", pCutBkImg);
			cvShowImage("foreground", pCutFrImg);
			
			//按键事件，空格暂停，其他跳出循环
			int temp = cvWaitKey(2);
			if (temp == 32) {
				while (cvWaitKey() == -1);
			}
			else if (temp >= 0) {
				break;
			}
		}
		//恢复ROI区域
		cvResetImageROI(pFrame);
	}

	//销毁窗口
	cvDestroyWindow("video");
	cvDestroyWindow("background");
	cvDestroyWindow("foreground");
	
	//释放图像和矩阵
	cvReleaseImage(&pCutFrImg);
	cvReleaseImage(&pCutBkImg);
	cvReleaseImage(&pCutFrame);

	cvReleaseMat(&pCutFrameMat);
	cvReleaseMat(&pCutFrMat);
	cvReleaseMat(&pCutBkMat);
	cvReleaseCapture(&pCapture);

	return 0;

